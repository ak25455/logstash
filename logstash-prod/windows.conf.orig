filter {

    if [type] == "eventlog" {
# Incoming Windows Event logs from nxlog
    # The EventReceivedTime field must contain only digits, or it is an invalid message
#    grep {
#        match => [ "EventReceivedTime",  "\d+"]
#    }
#  if "Severity" == "INFO" { drop { } }

    if "EventID" == 5145 or
       "EventID" =~ /4768|4769]/ or
       "EventID" == 4574 or
       "EventID" == 4656 or
       "EventID" == 4658 or
       "EventID" == 4771   { drop { } }

#   Drop Network Drive Mapping Events
    if "EventID" == 4624 and "LogonType" == 3  {drop {} }

    mutate {
        # Lowercase some values that are always in uppercase
        lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
    }
    mutate {
        # Set source to what the message says
        rename => [ "Hostname", "@source_host" ]
    }
    date {
        # Convert timestamp from integer in UTC
        match => ["EventReceivedTime",  "UNIX"]
    }
    if "EventID" == 4624 {
            mutate {
                   rename => [ "TargetUserName", "UserName" ]
                   add_tag => "Logon"
                   }
    }
     grok {
         match => [ "SourceHost", "%{WORD:Dept}-%{GREEDYDATA}" ]
     }
     grok {
         match => [ "@message", "%{DATA:Description}\.%{GREEDYDATA}" ]
     }
     translate {
                       field => "Dept"
                       destination => "Department"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/department.yaml"
                       remove_field => "Dept"
     }
     translate {
                       field => "LogonType"
                       destination => "LogonTypeDesc"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/logon_type.yaml"
                       remove_field => "Dept"
     }

    mutate {
        # Rename some fields into something more useful
        rename => [ "Message", "@message" ]
        rename => [ "IpAddress", "SourceIP" ]
        rename => [ "IpPort", "SourcePort" ]
#        rename => [ "SubjectUserName", "UserName" ]
        rename => [ "SeverityValue", "eventlog_severity_code" ]
        rename => [ "Channel", "eventlog_channel" ]
        rename => [ "SourceName", "eventlog_program" ]
        rename => [ "SourceModuleName", "nxlog_input" ]
    }
# Drop Traffic created by computer accounts
    if [UserName] =~ /(.+)\$/ 
    or [SubjectUserName] =~ /(.+)\$/ 
    or [TargetUserName] =~ /(.+)\$/ { drop { } }




#       [UserName] =~ /LogRhythm/ or
#       [UserName] =~ /svcSharePoint/ or
#       [UserName] =~ /sqlserver/ or
#       [UserName] =~ /admin/ or
#       [UserName] =~ /SCOM_/ or
#       [UserName] =~ /BT_/ or
#       [UserName] =~ /OpsMgr/ or
#       [UserName] =~ /extest/ or
#       [UserName] =~ /GoodAdmin/ or
#       [UserName] =~ /install/ or
#       [UserName] =~ /trackithelpdesk/ or
#       [UserName] =~ /ActiveAdminSvc/ or
     grok {
         match => [ "SourceHost", "%{WORD:Dept}-%{GREEDYDATA}" ]
     }
     grok {
         match => [ "@message", "%{DATA:Description}\.%{GREEDYDATA}" ]
          }
     translate {
                       field => "Dept"
                       destination => "Department"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/department.yaml"
                       remove_field => "Dept"
     }
     translate {
                       field => "LogonType"
                       destination => "LogonTypeDesc"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/logon_type.yaml"
                       remove_field => "Dept"
     }


    mutate {
        # Remove redundant fields
        remove_field => [ "SourceModuleType", "EventTimeWritten", "EventTime", "EventReceivedTime", "EventType", "SubjectUserSid", "TargetUserSid", "LogonGuid", "TargetLogonId", "SubjectLogonId", "ProviderGuid", "Opcode", "OpcodeValue", "ThreadID", "eventlog_pid", "nxlog_input", "eventlog_program", "TransmittedServices", "Task", "SourcePort", "RecordNumber", "ProcessID"  ]
        convert => [ "EventID", "string" ]
    }
#    if "EventID" == 4624 {
#        elasticsearch {
#            hosts => [ "10.128.2.57", "10.128.2.60" ]
#            query => "UserName:${UserName}"
#            fields => ["%{UserName}.4624", "UserName" ]
#        }
#        ruby {
#            code => "event["%{UserName}.4624"] = event["%{UserName}.4624"] + 1"
#        }
#    }
#     if "EventID" == 4624 {
#         metrics {
#             meter => [ "WinLogin.$%{UserName}" ]
#             add_tag => [ 'metric" ]
#         }
#     }
   }   
}
