filter {

    if [type] == "eventlog" {

#  Drop Traffic rated as Informational
     
#    if "Severity" == "info" 

    if "EventID" == 5145 or
       "EventID" == 5136 or
       "EventID" =~ /4768|4769]/ or
       "EventID" == 4574 or
       "EventID" == 4771   { drop { } }

    mutate {
        # Lowercase some values that are always in uppercase
        lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
    }
    mutate {
        # Set source to what the message says
        rename => [ "Hostname", "@source_host" ]
    }
    date {
        # Convert timestamp from integer in UTC
        match => ["EventReceivedTime",  "UNIX"]
    }
#    if [EventID] == 5624 {
        mutate {
            rename => [ "SubjectUserName", "UserName" ]
        }
#    }
#    if ([EventID] == 538 or [EventID] == 540) {
        mutate {
            rename => [ "AccountName", "UserName" ]
        }
#    }
    mutate {
        # Rename some fields into something more useful
        rename => [ "Message", "@message" ]
        rename => [ "IpAddress", "SourceIP" ]
        rename => [ "IpPort", "SourcePort" ]
#        rename => [ "TargetUserName", "UserName" ]
#        rename => [ "Severity", "eventlog_severity" ]
        rename => [ "SeverityValue", "eventlog_severity_code" ]
        rename => [ "Channel", "eventlog_channel" ]
        rename => [ "SourceName", "eventlog_program" ]
        rename => [ "SourceModuleName", "nxlog_input" ]
        rename => [ "Workstation", "SourceHost" ]
        rename => [ "WorkstationName", "SourceHost" ]
#        rename => [ "Category", "eventlog_category" ]
#        rename => [ "EventID", "eventlog_id" ]
#        rename => [ "RecordNumber", "eventlog_record_number" ]
#        rename => [ "ProcessID", "eventlog_pid" ]
    }
     grok {
         match => [ "@source_host", "%{WORD:Dept}-%{GREEDYDATA}" ]
     }
     grok {
         match => [ "@message", "%{DATA:Description}(\.|\:)%{GREEDYDATA}" ]
          }
     translate {
                       field => "Dept"
                       destination => "Department"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/department.yaml"
                       remove_field => "Dept"
     }
     translate {
                       field => "LogonType"
                       destination => "LogonTypeDesc"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/logon_type.yaml"
                       remove_field => "Dept"
     }
     translate {
                       field => "Status"
                       destination => "Description"
                       dictionary => [
                                       "0xc0000071", "Expired Password",
                                       "0xc0000064", "User name does not exist "
                                     ]
     }


# Drop Traffic created by computer accounts
    if ([LogonType] == "3" or [LogonType] == "4" or [Logontype] == "5") and (
     [UserName] =~ /(.+)\$/ or
       [UserName] =~ /LogRhythm/ or
       [UserName] =~ /Aspect/ or
       [UserName] =~ /SA-ProdPMP/ or
       [UserName] =~ /extest/ or
       [UserName] =~ /ActiveAdminSvc/ or
       [UserName] =~ /SPInstall/ or
       [UserName] =~ /scriptlogic/ or
       [UserName] =~ /scheduler/ or
       [UserName] =~ /PA_UserID/ or
       [SubjectUserName] =~ /PA_UserID/ or
       [UserName] =~ /SYSTEM/ or
       [UserName] =~ /ANONYMOUS/ or
       [UserName] =~ /SCOM_/ or
       [SubjectUserName] =~ /SCOM_/ or
       [SubjectUserName] =~ /(.+)\$/ ) 
      { drop { } }


 
    mutate {
        # Remove redundant fields
        remove_field => [ "SourceModuleType", "EventTimeWritten", "EventTime", "EventReceivedTime", "EventType", "SubjectUserSid", "TargetUserSid", "LogonGuid", "TargetLogonId", "SubjectLogonId", "ProviderGuid", "Opcode", "OpcodeValue", "ThreadID", "eventlog_pid", "nxlog_input", "RecordNumber", "ProcessID", "Task" , "Version", "eventlog_program", "AccessList", "AccessMask", "SectionPath", "TransmittedServices", "TransactionId", "TaskInstanceId","StartUSN", "SourceDRA", "SessionID", "ResultCode", "RestrictedSidCount", "ResultCode", "Properties", "OldSd", "NewSd",  "@message", "AccessReason", "ActivityID", "CategoryNumber", "DestinationDRA", "EndUSN", "HandleId", "ImpersonationLevel", "InstanceId", "KeyLength", "Keywords", "LMPackagename", "Options", "Service", "ShareLocalPath", "SourcePort" ]
        convert => [ "EventID", "string" ]
        convert => [ "SourceIP", "string" ]
        add_tag => [ "Windows" ]
        add_field => {"short_message" => "%{EventID}"}
    }
   }   
}
