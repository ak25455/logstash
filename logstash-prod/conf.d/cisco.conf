filter {

if [type] == "cisco" {
  # Pull the syslog part and Cisco tag out of the message
  grok {
    match => ["message", "^<%{POSINT:syslog_pri}>%{CISCOTIMESTAMP:timestamp} %{DATA:hostname}: %%{CISCOTAG:ciscotag}: %{GREEDYDATA:cisco_message}"]
    add_tag => [ "cisco" ]
  }

  # Parse the syslog severity and facility
  syslog_pri { }

  # Extract fields from the each of the detailed message types
  # The patterns provided below are included in core of LogStash 1.2.0.
  grok {
    match => [
      "cisco_message", "%{CISCOFW106001}",
      "cisco_message", "%{CISCOFW106006_106007_106010}",
      "cisco_message", "%{CISCOFW106014}",
      "cisco_message", "%{CISCOFW106015}",
      "cisco_message", "%{CISCOFW106021}",
      "cisco_message", "%{CISCOFW106023}",
      "cisco_message", "%{CISCOFW106100}",
      "cisco_message", "%{CISCOFW110002}",
      "cisco_message", "%{CISCOFW302010}",
      "cisco_message", "%{CISCOFW302013_302014_302015_302016}",
      "cisco_message", "%{CISCOFW302020_302021}",
      "cisco_message", "%{CISCOFW304001}",
      "cisco_message", "%{CISCOFW305011}",
      "cisco_message", "%{CISCOFW313001_313004_313008}",
      "cisco_message", "%{CISCOFW313005}",
      "cisco_message", "%{CISCOFW402117}",
      "cisco_message", "%{CISCOFW402119}",
      "cisco_message", "%{CISCOFW419001}",
      "cisco_message", "%{CISCOFW419002}",
      "cisco_message", "%{CISCOFW500004}",
      "cisco_message", "%{CISCOFW602303_602304}",
      "cisco_message", "%{CISCOFW710001_710002_710003_710005_710006}",
      "cisco_message", "%{CISCOFW713172}",
      "cisco_message", "%{CISCOFW733100}"
    ]
#    remove_field => [ "message", "cisco_message"  ]
  }
  mutate {
     rename => [ "src_ip", "SourceIP" ]
     rename => [ "dst_ip", "DestinationIP" ]
     rename => [ "dst_port", "DstPort" ]
     rename => [ "timestamp", "Generate Time" ]
     rename => [ "action", "Action" ]
     rename => [ "ciscotag", "EventID" ]
     add_field => { "loghost" => "%{hostname}" }
  }
  # Parse the date
  date {
    match => ["timestamp",
      "MMM dd HH:mm:ss",
      "MMM  d HH:mm:ss",
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss"
    ]
  }
  if [SourceIP]  {
    geoip {
      source => "SourceIP"
      target => "geoip"
      database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }

  }
  mutate {
            # Remove Extra Fields
          add_field => { "short_message" => "%{EventID}" }
          remove_field => [ "hashcode1", "hashcode2", "icmp_code", "icmp_type" , "interval", "connection_count", "connection_count_max", "message" ]
          remove_field => [ "drop_rate_current_avg", "drop_rate_current_burst", "drop_rate_id", "drop_rate_max_avg", "drop_rate_max_burst", "drop_total_count", "drop_type"] 
          remove_field => [ "err_dst_interface", "err_dst_ip", "err_icmp_code", "err_icmp_type", "err_protocol", "err_src_interface", "err_src_ip" ] 
           remove_field => [ "syslog_facility", "syslog_facility_code", "syslog_pri", "syslog_severity", "syslog_severity_code" ]

  }
 }
}
