filter {

    if [type] == "eventlog" {
    # The EventReceivedTime field must contain only digits, or it is an invalid message
#    grep {
#        match => [ "EventReceivedTime",  "\d+"]
#    }
#  Drop Traffic rated as Informational
     
    if "Severity" == "INFO" { drop { } }

    if "EventID" == 5145 or
       "EventID" =~ /4768|4769]/ or
       "EventID" == 4574 or
       "EventID" == 4771   { drop { } }

    mutate {
        # Lowercase some values that are always in uppercase
        lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
    }
    mutate {
        # Set source to what the message says
        rename => [ "Hostname", "@source_host" ]
    }
    date {
        # Convert timestamp from integer in UTC
        match => ["EventReceivedTime",  "UNIX"]
    }
    if "EventID" == 4624 or "EventID" == 4674 {
        mutate {
            rename => [ "SubjectUserName", "UserName" ]
        }
    }
    mutate {
        # Rename some fields into something more useful
        rename => [ "Message", "@message" ]
        rename => [ "IpAddress", "SourceIP" ]
        rename => [ "IpPort", "SourcePort" ]
        rename => [ "TargetUserName", "UserName" ]
#        rename => [ "Severity", "eventlog_severity" ]
        rename => [ "SeverityValue", "eventlog_severity_code" ]
        rename => [ "Channel", "eventlog_channel" ]
        rename => [ "SourceName", "eventlog_program" ]
        rename => [ "SourceModuleName", "nxlog_input" ]
        rename => [ "Workstation", "SourceHost" ]
        rename => [ "@source_host", "SourceHost" ]
        rename => [ "WorkstationName", "SourceHost" ]
#        rename => [ "Category", "eventlog_category" ]
#        rename => [ "EventID", "eventlog_id" ]
#        rename => [ "RecordNumber", "eventlog_record_number" ]
#        rename => [ "ProcessID", "eventlog_pid" ]
    }
     grok {
         match => [ "SourceHost", "%{WORD:Dept}-%{GREEDYDATA}" ]
         add_tag => [ "Dept split" ]
     }
     grok {
         match => [ "@message", "%{DATA:Description}\.%{GREEDYDATA}" ]
         add_tag => [ "Description" ]
          }
     translate {
                       field => "Dept"
                       destination => "Department"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/department.yaml"
                       remove_field => "Dept"
     }
     translate {
                       field => "LogonType"
                       destination => "LogonTypeDesc"
                       regex => "true"
                       dictionary_path => "/etc/logstash/dictionary/logon_type.yaml"
                       remove_field => "Dept"
     }


# Drop Traffic created by computer accounts
    if [UserName] =~ /(.+)\$/ or
       [UserName] =~ /LogRhythm/ or
       [UserName] =~ /svcSharePoint/ or
       [UserName] =~ /sqlserver/ or
       [UserName] =~ /admin/ or
       [UserName] =~ /SCOM_/ or
       [UserName] =~ /BT_/ or
       [UserName] =~ /OpsMgr/ or
       [UserName] =~ /extest/ or
       [UserName] =~ /GoodAdmin/ or
       [UserName] =~ /install/ or
       [UserName] =~ /trackithelpdesk/ or
       [UserName] =~ /ActiveAdminSvc/ or
       [UserName] =~ /EVAdmin/ or
       [UserName] =~ /SPInstall/ or
       [SubjectUserName] =~ /(.+)\$/ { drop { } }

    if [UserName] =~ /akumar/ {
       mutate {
          add_tag => [ "mail" ]
       }
    }
 
    mutate {
        # Remove redundant fields
        remove_field => [ "SourceModuleType", "EventTimeWritten", "EventTime", "EventReceivedTime", "EventType", "SubjectUserSid", "TargetUserSid", "LogonGuid", "TargetLogonId", "SubjectLogonId", "ProviderGuid", "Opcode", "OpcodeValue", "ThreadID", "eventlog_pid", "nxlog_input", "RecordNumber", "ProcessID", "@message", "Task" , "Version", "eventlog_program", "AccessList", "AccessMask", "SectionPath", "FilterRTID", "ImpersonationLevel", "KeyLength", "Keywords", "LayerName", "LayerRTID", "LmPackageName", "TransactionId", "TransmittedServices", "TicketOptions", "TargetSid", "SubStatus", "Status", "RestrictedSidCount", "Properties", "HandleId", "FailureReason", "AppCorrelationID", "AttributeLDAPDisplayName", "AttributeSyntaxOID", "AttributeValue", "AccessReason", "AdditionalInfo" ]
        convert => [ "EventID", "string" ]
    }
   }   
}
